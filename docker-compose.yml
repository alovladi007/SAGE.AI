# Docker Compose Configuration for Academic Integrity Platform
# docker-compose.yml

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: academic_integrity_db
    environment:
      POSTGRES_USER: ${DB_USER:-aiplatform}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
      POSTGRES_DB: ${DB_NAME:-academic_integrity}
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init_scripts:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      - academic_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-aiplatform}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for Caching and Job Queue
  redis:
    image: redis:7-alpine
    container_name: academic_integrity_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - academic_network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Elasticsearch for Full-text Search
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: academic_integrity_elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - xpack.security.enabled=false
      - cluster.name=academic-integrity-cluster
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - academic_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9200"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Minio for Object Storage (PDFs, Images)
  minio:
    image: minio/minio:latest
    container_name: academic_integrity_minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-minioadmin123}
    command: server /data --console-address ":9001"
    networks:
      - academic_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: academic_integrity_backend
    environment:
      DATABASE_URL: postgresql://${DB_USER:-aiplatform}:${DB_PASSWORD:-secure_password}@postgres:5432/${DB_NAME:-academic_integrity}
      REDIS_URL: redis://redis:6379
      ELASTICSEARCH_URL: http://elasticsearch:9200
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: ${MINIO_USER:-minioadmin}
      MINIO_SECRET_KEY: ${MINIO_PASSWORD:-minioadmin123}
      JWT_SECRET: ${JWT_SECRET}  # REQUIRED: Set in .env file - no default for security
      PYTHONUNBUFFERED: 1
    volumes:
      - ./backend:/app
      - ml_models:/app/models
    ports:
      - "8001:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    networks:
      - academic_network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # ML Processing Worker (Celery)
  ml_worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: academic_integrity_ml_worker
    environment:
      DATABASE_URL: postgresql://${DB_USER:-aiplatform}:${DB_PASSWORD:-secure_password}@postgres:5432/${DB_NAME:-academic_integrity}
      REDIS_URL: redis://redis:6379
      ELASTICSEARCH_URL: http://elasticsearch:9200
      MINIO_ENDPOINT: minio:9000
      MODEL_CACHE_DIR: /app/models
      PYTHONUNBUFFERED: 1
      C_FORCE_ROOT: "true"
    volumes:
      - ./backend:/app
      - ml_models:/app/models
      - processing_temp:/tmp/processing
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - academic_network
    command: celery -A celery_tasks worker --loglevel=info --concurrency=2 --max-tasks-per-child=50

  # Celery Beat Scheduler
  celery_beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: academic_integrity_celery_beat
    environment:
      DATABASE_URL: postgresql://${DB_USER:-aiplatform}:${DB_PASSWORD:-secure_password}@postgres:5432/${DB_NAME:-academic_integrity}
      REDIS_URL: redis://redis:6379
      PYTHONUNBUFFERED: 1
      C_FORCE_ROOT: "true"
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - academic_network
    command: celery -A celery_app beat --loglevel=info

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: academic_integrity_frontend
    environment:
      REACT_APP_API_URL: http://backend:8000
      REACT_APP_WS_URL: ws://backend:8000/ws
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "4000:3000"
    depends_on:
      - backend
    networks:
      - academic_network
    command: npm start

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: academic_integrity_nginx
    ports:
      - "8082:80"
      - "8444:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - backend
      - frontend
    networks:
      - academic_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: academic_integrity_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9091:9090"
    networks:
      - academic_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: academic_integrity_grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "4001:3000"
    depends_on:
      - prometheus
    networks:
      - academic_network

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: academic_integrity_backup
    environment:
      POSTGRES_USER: ${DB_USER:-aiplatform}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
      POSTGRES_DB: ${DB_NAME:-academic_integrity}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      - postgres
    networks:
      - academic_network
    entrypoint: ["/bin/sh", "-c"]
    command: ["while true; do /backup.sh; sleep 86400; done"]

networks:
  academic_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  minio_data:
  ml_models:
  processing_temp:
  nginx_cache:
  prometheus_data:
  grafana_data:
